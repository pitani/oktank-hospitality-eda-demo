server:
  port: 8184

spring:
  kafka:
    bootstrap-servers: localhost:9092

    # ---- CONSUMER (Notification service only consumes) ----
    consumer:
      group-id: notification-svc
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # Use ErrorHandling + JsonDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.oktank.*
        # IMPORTANT: rely on type headers; don't force a single default type
        spring.json.use.type.headers: true
        # Optional: be lenient if payloads evolve
        spring.json.fail.on.unknown.properties: false
      # Optional: start from latest if group is new
      # auto-offset-reset: latest

    # ---- PRODUCER (not needed here; safe to keep minimal defaults) ----
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        # KEEP TYPE HEADERS so consumers can auto-map classes
        spring.json.add.type.headers: true
        spring.json.trusted.packages: com.oktank.*

    listener:
      ack-mode: batch  # or 'record' if you prefer per-record acks

app:
  topics:
    reservationCreated: reservations.created
    loyaltyUpdated: loyalty.updated
